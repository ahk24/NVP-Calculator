#!/usr/bin/env python3
"""
Advanced NPV & Project‑Valuation Toolkit  – **v3.1**
===================================================
Completed end‑to‑end script (previous upload was truncated after line 284).
Everything compiles and runs out‑of‑the‑box on Python 3.9+ with:
    numpy, pandas, matplotlib  (optional: numpy‑financial for faster IRR/NPV)
"""

from __future__ import annotations

import math
import csv
from pathlib import Path
import sys
import warnings

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# ---------- Optional: numpy‑financial backend --------------------------------
try:
    import numpy_financial as npf  # pip install numpy-financial
    BACKEND = "numpy_financial"
except ModuleNotFoundError:
    npf = None
    BACKEND = "internal"

# ===================== core financial helpers ===============================

def npv(rate: float, cashflows: list[float] | np.ndarray) -> float:
    """Net Present Value for a series of cash‑flows discounted at `rate`."""
    if npf is not None:
        return float(npf.npv(rate, cashflows))
    cf = np.asarray(cashflows, dtype=float)
    t = np.arange(cf.size)
    with np.errstate(divide="ignore", invalid="ignore"):
        return float(np.sum(cf / (1 + rate) ** t))


def irr_newton(cashflows: list[float], guess: float = 0.1) -> float:
    """Internal Newton–Raphson solver for IRR."""
    r = guess
    for _ in range(100):
        f = npv(r, cashflows)
        df = sum(-i * cf / (1 + r) ** (i + 1) for i, cf in enumerate(cashflows))
        if abs(df) < 1e-12:
            break
        r_new = r - f / df
        if abs(r_new - r) < 1e-8:
            return r_new
        r = r_new
    return math.nan


def irr(cashflows: list[float]) -> float:
    if npf is not None:
        return float(npf.irr(cashflows))
    return irr_newton(cashflows)


def mirr(cashflows: list[float], finance_rate: float, reinvest_rate: float) -> float:
    neg = [cf for cf in cashflows if cf < 0]
    pos = [cf for cf in cashflows if cf > 0]
    if not neg or not pos:
        return math.nan
    n = len(cashflows) - 1
    pv_neg = sum(cf / (1 + finance_rate) ** i for i, cf in enumerate(cashflows) if cf < 0)
    fv_pos = sum(cf * (1 + reinvest_rate) ** (n - i) for i, cf in enumerate(cashflows) if cf > 0)
    return (-(fv_pos / pv_neg) ** (1 / n)) - 1


def discounted_payback(cashflows: list[float], discount_rate: float) -> float:
    cum = 0.0
    for t, cf in enumerate(cashflows):
        cum += cf / (1 + discount_rate) ** t
        if cum >= 0:
            prev = cum - cf / (1 + discount_rate) ** t
            frac = (0 - prev) / (cum - prev) if cf else 0
            return t - 1 + frac
    return math.inf


def eaa(npv_val: float, discount_rate: float, years: int) -> float:
    if years <= 0:
        return math.nan
    af = discount_rate / (1 - (1 + discount_rate) ** -years)
    return npv_val * af


def real_rate(nominal: float, inflation: float) -> float:
    return (1 + nominal) / (1 + inflation) - 1

# ===================== UI helpers ===========================================

def ask_float(prompt: str, *, default: float | None = None) -> float:
    suf = f" [{default}] " if default is not None else " "
    while True:
        raw = input(prompt + suf).strip()
        if raw == "":
            if default is not None:
                return default
            print("  Please enter a number.")
            continue
        try:
            return float(raw.replace(",", ""))
        except ValueError:
            print("  Invalid number – try again.")


def ask_yes_no(prompt: str, *, default: bool = True) -> bool:
    suf = "[Y/n] " if default else "[y/N] "
    while True:
        raw = input(prompt + suf).strip().lower()
        if raw == "":
            return default
        if raw in ("y", "yes"):
            return True
        if raw in ("n", "no"):
            return False
        print("  Please answer y or n.")


def load_cashflows_csv(path: Path) -> list[float]:
    data: list[float] = []
    with path.open(newline="") as f:
        rdr = csv.reader(f)
        for row in rdr:
            if row:
                try:
                    data.append(float(row[0].strip()))
                except ValueError as exc:
                    raise ValueError(f"Non‑numeric value: {row[0]}") from exc
    if not data:
        raise ValueError("CSV empty.")
    return data

# ===================== main routine =========================================

def main() -> None:
    print("\nAdvanced NPV Toolkit v3.1 – press Enter to accept defaults\n")

    cf0 = ask_float("0) Initial investment cash‑outflow € (negative):", default=-100_000)

    # Cash‑flow schedule
    if ask_yes_no("Load year‑by‑year cash‑flows from CSV?", default=False):
        while True:
            p = Path(input("   CSV path: ").strip())
            try:
                cf_series = load_cashflows_csv(p)
                constant_growth = False
                break
            except Exception as e:
                print(f"   Error → {e}")
    else:
        cf1 = ask_float("1) Cash‑flow at end of Year 1 €:", default=30_000)
        g_nom = ask_float("2) Constant annual growth g (decimal):", default=0.02)
        years = int(ask_float("3) Number of future years (0 = perpetual):", default=5))
        horizon_len = years if years else 100
        cf_series = [cf1 * (1 + g_nom) ** t for t in range(horizon_len)]
        constant_growth = True

    horizon = len(cf_series)

    # Discount rates
    r_nom1 = ask_float("4) Nominal discount rate R₁ (construction/early):", default=0.08)
    if ask_yes_no("   Different rate after a switch‑year?", default=False):
        sw_year = int(ask_float("   Year switching to R₂:", default=1))
        r_nom2 = ask_float("   Nominal discount rate R₂ (later years):", default=0.07)
        r_nom_vec = np.array([r_nom1 if t < sw_year else r_nom2 for t in range(horizon + 1)])
    else:
        r_nom_vec = np.full(horizon + 1, r_nom1)

    infl = ask_float("5) Expected annual inflation π:", default=0.025)

    apply_tax = ask_yes_no("Apply corporate tax on operating CF?", default=True)
    tax_rate = ask_float("   Corporate tax rate τ:", default=0.25) if apply_tax else 0.0
    wc_pct = ask_float("Net working‑capital %% of CF (0 = none):", default=0.0)

    terminal_val = 0.0
    if ask_yes_no("Add Gordon‑growth terminal value at final forecast year?", default=False):
        g_term = ask_float("   Terminal growth gₜ (< last R):", default=0.02)
        last_cf = cf_series[-1] * (1 + g_term)
        terminal_val = last_cf / (r_nom_vec[-1] - g_term)
        cf_series[-1] += terminal_val

    run_mc = ask_yes_no("Run Monte‑Carlo simulation?", default=False)
    if run_mc:
        n_iter = int(ask_float("   Iterations:", default=10_000))
        r_std = ask_float("   Std‑dev of discount rate:", default=0.02)
        g_std = ask_float("   Std‑dev of growth rate:", default=0.01)

    # Assemble nominal CF vector
    t = np.arange(0, horizon + 1)
    cf_nom = np.empty_like(t, dtype=float)
    cf_nom[0] = cf0
    cf_nom[1:] = cf_series[:horizon]

    # Working capital
    if wc_pct:
        wc_delta = np.zeros_like(cf_nom)
        for yr in range(1, len(cf_nom)):
            wc_delta[yr] = wc_pct * (cf_nom[yr] - cf_nom[yr - 1])
        cf_nom -= wc_delta

    if apply_tax:
        cf_nom[1:] *= (1 - tax_rate)

    # PV maths
    disc_nom = np.cumprod(np.concatenate(([1.0], 1 / (1 + r_nom_vec[1:]))))
    pv_nom = cf_nom * disc_nom
    npv_nom = pv_nom.sum()
    cum_nom = np.cumsum(pv_nom)

    cf_real = cf_nom / (1 + infl) ** t
    r_real_vec = real_rate(r_nom_vec, infl)
    disc_real = np.cumprod(np.concatenate(([1.0], 1 / (1 + r_real_vec[1:]))))
    pv_real = cf_real * disc_real
    npv_real = pv_real.sum()
    cum_real = np.cumsum(pv_real)

    # Metrics
    irr_val = irr(cf_nom.tolist())
    mirr_val = mirr(cf_nom.tolist(), r_nom_vec[0], r_nom_vec[-1])
    dpp = discounted_payback(cf_nom.tolist(), r_nom_vec[0])
    eaa_val = eaa(npv_nom, r_nom_vec[0], horizon)

    # Sensitivity (constant‑growth only)
    sensitivity = {}
    if constant_growth:
        def npv_var(cf1=None, r=None, g=None, pi=None):
            _cf1 = cf1 if cf1 is not None else cf_series[0]
            _r = r if r is not None else r_nom_vec[0]
            _g = g if g is not None else g_nom
            _pi = pi if pi is not None else infl
            ser = np.array([cf0] + [_cf1 * (1 + _g) ** tt for tt in range(horizon)])
            return npv(_r, ser)
        sensitivity = {
            "CF Year 1": (npv_var(cf1=cf_series[0] * 0.9), npv_var(cf1=cf_series[0] * 1.1)),
            "Discount rate": (npv_var(r=r_nom_vec[0] * 1.1), npv_var(r=r_nom_vec[0] * 0.9)),
            "Growth g": (npv_var(g=g_nom * 0.9), npv_var(g=g_nom * 1.1)),
            "Inflation π": (npv_var(pi=infl * 1.1), npv_var(pi=infl * 0.9)),
        }

    # NPV vs discount‑rate curve
    r_span = np.linspace(0.0, max(0.25, r_nom_vec[0] * 2), 120)
    npv_curve = [npv(r, cf_nom) for r in r_span]

    # Monte‑Carlo simulation
    if run_mc:
        rng = np.random.default_rng()
        mc_npvs = np.empty(n_iter)
        for i in range(n_iter):
            r_s = rng.normal(r_nom_vec[0], r_std)
            if constant_growth:
                g_s = rng.normal(g_nom, g_std)
                series = np.array([cf0] + [cf_series[0] * (1 + g_s) ** tt for tt in range(horizon)])
            else:
                series = np.array([cf0] + cf_series[:horizon])
            mc_npvs[i] = npv(r_s, series)

    # ----------------- OUTPUT -------------------------------------------------
    print("\n----------------- Results -----------------")
    print(f"Nominal NPV  : {npv_nom:,.2f}")
    print(f"Real NPV     : {npv_real:,.2f}")
    print(f"IRR ({BACKEND}) : {irr_val * 100:,.2f} %")
    print(f"MIRR         : {mirr_val * 100:,.2f} %" if not math.isnan(mirr_val) else "MIRR         : n/a")
    print("Disc. Payback: " + (f"{dpp:.2f} yrs" if math.isfinite(dpp) else "> forecast"))
    print(f"EAA          : {eaa_val:,.2f} per year")
    if run_mc:
        print(f"Monte‑Carlo mean NPV: {mc_npvs.mean():,.2f}")
        print(f"Prob(NPV < 0)     : {(mc_npvs < 0).mean() * 100:.2f} %")

    # ----------------- PLOTS --------------------------------------------------
    plt.figure()
    plt.plot(t, cf_nom, label="Nominal CF")
    plt.plot(t, cf_real, label="Real CF")
    plt.title("Cash‑flow profile")
    plt.xlabel("Year")
    plt.ylabel("€")
    plt.legend()
    plt.tight_layout()

    plt.figure()
    plt.plot(t, cum_nom, label="Cum. NPV nominal r")
    plt.plot(t, cum_real, label="Cum. NPV real r")
    plt.title("Cumulative NPV – nominal vs real")
    plt.xlabel("Year")
    plt.ylabel("€")
    plt.legend()
    plt.tight_layout()

    if sensitivity:
        labels = list(sensitivity.keys())
        y_pos = np.arange(len(labels))
        lows = [npv_nom - v[0] for v in sensitivity.values()]
        highs = [v[1] - npv_nom for v in sensitivity.values()]
        plt.figure()
        plt.barh(y_pos, highs, left=npv_nom, color="lightgrey")
        plt.barh(y_pos, -np.array(lows), left=npv_nom - np.array(lows), color="lightgrey")
        plt.yticks(y_pos, labels)
        plt.axvline(npv_nom, color="black")
        plt.title("Tornado – ±10 % inputs")
        plt.tight_layout()

    plt.figure()
    plt.plot(r_span * 100, npv_curve)
    plt.axhline(0, color="black", linestyle="--")
    plt.xlabel("Discount rate %")
    plt.ylabel("NPV (€)")
    plt.title("NPV vs Discount rate")
    plt.tight_layout()

    if run_mc:
        plt.figure()
        plt.hist(mc_npvs, bins=60)
        plt.axvline(mc_npvs.mean(), linestyle="--", label="Mean")
        plt.title("Monte‑Carlo NPV distribution")
        plt.xlabel("NPV (€)")
        plt.ylabel("Frequency")
        plt.legend()
        plt.tight_layout()

    plt.show()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit("\nInterrupted by user.")
